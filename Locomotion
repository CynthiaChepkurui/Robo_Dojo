#include <Arduino.h>
#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <PID_v1.h>

// Define the pins for motor control and encoder
const int left_pwm_fwd = 5;
const int left_pwm_bwd = 6;
const int right_pwm_fwd = 7;
const int right_pwm_bwd = 8;
const int PIN_ENCOD_A_MOTOR_LEFT = 1;
const int PIN_ENCOD_B_MOTOR_LEFT = 2;
const int PIN_ENCOD_A_MOTOR_RIGHT = 3;
const int PIN_ENCOD_B_MOTOR_RIGHT = 4;

// ... Other constants and variables ...
const double radius = 0.0026;                   //Wheel radius, in m
const double wheelbase = 0.0065;               //Wheelbase, in m
const double encoder_cpr = 110;                 //encoder revolution


// Color sensor pins
#define S0 9
#define S1 10
#define S2 11
#define S3 12
#define sensorOut 13

// ... Other color sensor variables ...
//colour function

 int colorSensor(){
  redPW = getColorPW(LOW, LOW); // Set S2 and S3 to LOW for Red
  redValue = map(redPW, redMin, redMax, 255, 0);
  delay(200);

  // Read Green value
  greenPW = getColorPW(HIGH, HIGH); // Set S2 and S3 to HIGH for Green
  greenValue = map(greenPW, greenMin, greenMax, 255, 0);
  delay(200);

  // Read Blue value
  bluePW = getColorPW(LOW, HIGH); // Set S2 to LOW and S3 to HIGH for Blue
  blueValue = map(bluePW, blueMin, blueMax, 255, 0);
  delay(200);

  // Read White value
  whitePW = getColorPW(HIGH, LOW); // Set S2 to HIGH and S3 to LOW for White
  whiteValue = map(whitePW, whiteMin, whiteMax, 255, 0);
  delay(200);

  // Read Black value
  blackPW = getColorPW(HIGH, HIGH); // Set S2 and S3 to HIGH for Black
  blackValue = map(blackPW, blackMin, blackMax, 255, 0);
  delay(200);

  // Print output to Serial Monitor
  Serial.print("Red = ");
  Serial.print(redValue);
  Serial.print(" Green = ");
  Serial.print(greenValue);
  Serial.print(" Blue = ");
  Serial.print(blueValue);
  Serial.print(" White = ");
  Serial.print(whiteValue);
  Serial.print(" Black = ");
  Serial.println(blackValue);
}

// Function to read Pulse Widths for a specific color
void getColorPW(int s2State, int s3State) {
  // Set sensor to read the specified color
  digitalWrite(S2, s2State);
  digitalWrite(S3, s3State);
  
  // Read the output Pulse Width
  int PW = pulseIn(sensorOut, LOW);
  
  return PW;
 }

 int getColorPW(int s2State, int s3State) {
  digitalWrite(S2, s2State);
  digitalWrite(S3, s3State);
  int PW = pulseIn(sensorOut, LOW);
  return PW;
}

//code for angular and linear movement 
void handle_cmd(const geometry_msgs::Twist& cmd_vel) {
  noCommLoops = 0;  // Reset the counter for the number of main loops without communication

  // Extract the commanded linear and angular velocities from the message
  double linear_vel = cmd_vel.linear.x;
  double angular_vel = cmd_vel.angular.z;

  // Calculate the left and right motor speeds to achieve the desired movement
  double left_speed = (linear_vel - angular_vel * (wheelbase / 2.0)) / (2.0 * radius);
  double right_speed = (linear_vel + angular_vel * (wheelbase / 2.0)) / (2.0 * radius);

  // Check if the robot should move forward or backward
  if (linear_vel > 0) {
    // Moving forward
    left_Fwd(static_cast<size_t>(left_speed));
    right_Fwd(static_cast<size_t>(right_speed));
  } else if (linear_vel < 0) {
    // Moving backward
    left_Bwd(static_cast<size_t>(-left_speed));
    right_Bwd(static_cast<size_t>(-right_speed));
  } else {
    // Robot is not moving linearly, stop both motors
    left_Stop();
    right_Stop();
  }

  // Check if the robot should turn left or right
  if (angular_vel > 0) {
    // Turning left
    left_Fwd(static_cast<size_t>(left_speed));
    right_Bwd(static_cast<size_t>(right_speed));
  } else if (angular_vel < 0) {
    // Turning right
    left_Bwd(static_cast<size_t>(-left_speed));
    right_Fwd(static_cast<size_t>(-right_speed));
  }
}


void setup() {
  // put your setup code here, to run once:
//motor
  pinMode(right_pwm_fwd, OUTPUT);    // sets the digital pin 13 as output
  pinMode(right_pwm_bwd, OUTPUT);
  pinMode(left_pwm_fwd, OUTPUT);
  pinMode(left_pwm_bwd, OUTPUT);

  
  nh.initNode();                            //init ROS node
  nh.getHardware()->setBaud(57600);         //set baud for ROS serial communication
  nh.subscribe(cmd_vel);                    //suscribe to ROS topic for velocity commands
  nh.advertise(speed_pub);                  //prepare to publish speed in ROS topic
 
  
  //setting motor speeds to zero
  left_Stop();
  right_Stop();
  //setting PID parameters
  //PID_leftMotor.SetSampleTime(5);
  //PID_rightMotor.SetSampleTime(5);
  PID_leftMotor.SetOutputLimits(-max_speed, max_speed);
  PID_rightMotor.SetOutputLimits(-max_speed, max_speed);
  PID_leftMotor.SetMode(AUTOMATIC);
  PID_rightMotor.SetMode(AUTOMATIC);
    
  // Define the rotary encoder for left motor
  pinMode(PIN_ENCOD_A_MOTOR_LEFT, INPUT); 
  pinMode(PIN_ENCOD_B_MOTOR_LEFT, INPUT); 
  digitalWrite(PIN_ENCOD_A_MOTOR_LEFT, HIGH);                // turn on pullup resistor
  digitalWrite(PIN_ENCOD_B_MOTOR_LEFT, HIGH);
  attachInterrupt(0, encoderLeftMotor, RISING);

  // Define the rotary encoder for right motor
  pinMode(PIN_ENCOD_A_MOTOR_RIGHT, INPUT); 
  pinMode(PIN_ENCOD_B_MOTOR_RIGHT, INPUT); 
  digitalWrite(PIN_ENCOD_A_MOTOR_RIGHT, HIGH);                // turn on pullup resistor
  digitalWrite(PIN_ENCOD_B_MOTOR_RIGHT, HIGH);
  attachInterrupt(1, encoderRightMotor, RISING);
  
  // colour sensor

   // Set S0 - S3 as outputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);

  // Set Sensor output as input
  pinMode(sensorOut, INPUT);

  // Set Frequency scaling to 20%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);

  // Setup Serial Monitor
  Serial.begin(9600);

  // ... Other setup code ...
}

void loop() {
  // put your main code here, to run repeatedly:
 nh.spinOnce();
  if((millis()-lastMilli) >= LOOPTIME)   
  {                                                                           // enter timed loop
    lastMilli = millis();
       
    if (abs(pos_left) < 5){                                                   //Avoid taking in account small disturbances
      speed_act_left = 0;
    }
    else {
      speed_act_left=((pos_left/encoder_cpr)*2*PI)*(1000/LOOPTIME)*radius;           // calculate speed of left wheel
    }
    
    if (abs(pos_right) < 5){                                                  //Avoid taking in account small disturbances
      speed_act_right = 0;
    }
    else {
    speed_act_right=((pos_right/encoder_cpr)*2*PI)*(1000/LOOPTIME)*radius;          // calculate speed of right wheel
    }

        // publishing encoder values for debugging the robot
          String LS = String(pos_left);
    String RS = String(pos_right);

    String FS= "LE  " + LS + "     " + "RE  "+ RS;
    char FA[FS.length() + 1];
    FS.toCharArray(FA,FS.length() + 1);

    nh.loginfo(FA);
    // debugging part complete
    
    pos_left = 0;
    pos_right = 0;

    speed_cmd_left = constrain(speed_cmd_left, -max_speed, max_speed);
    PID_leftMotor.Compute();                                                 
    // compute PWM value for left motor. Check constant definition comments for more information.
    PWM_leftMotor = constrain(((speed_req_left+sgn(speed_req_left)*min_speed_cmd)/speed_to_pwm_ratio) + (speed_cmd_left/speed_to_pwm_ratio), -255, 255); //

    speed_cmd_right = constrain(speed_cmd_right, -max_speed, max_speed);    
    PID_rightMotor.Compute();                                                 
    // compute PWM value for right motor. Check constant definition comments for more information.
    PWM_rightMotor = constrain(((speed_req_right+sgn(speed_req_right)*min_speed_cmd)/speed_to_pwm_ratio) + (speed_cmd_right/speed_to_pwm_ratio), -255, 255); // 

    if (noCommLoops >= noCommLoopMax) {                   //Stopping if too much time without command
        left_Stop();

    }
    else if (speed_req_left == 0){                        //Stopping
      left_Stop();
    }
    else if (PWM_leftMotor > 0){    
        left_Bwd(abs(PWM_leftMotor));                   //Going forward
    }
    else {              
        left_Fwd(abs(PWM_leftMotor));                   //Going backward
      
    }
    

    if (noCommLoops >= noCommLoopMax) {                   //Stopping if too much time without command
      right_Stop();
    }
    else if (speed_req_right == 0){                       //Stopping
      right_Stop();
    }
    else if (PWM_rightMotor > 0){                         //Going forward
      right_Fwd(abs(PWM_rightMotor));
    }
    else {                                                //Going backward
      right_Bwd(abs(PWM_rightMotor));
    }

    if((millis()-lastMilli) >= LOOPTIME){         //write an error if execution time of the loop in longer than the specified looptime
      nh.loginfo(" TOO LONG ");
    }

    noCommLoops++;
    if (noCommLoops == 65535){
      noCommLoops = noCommLoopMax;
    }
    
    publishSpeed(LOOPTIME);   //Publish odometry on ROS topic
  }
}

// Existing functions, including PID control and motor control
void publishSpeed(double time) {
  speed_msg.header.stamp = nh.now();      //timestamp for odometry data
  speed_msg.vector.x = speed_act_left;    //left wheel speed (in m/s)
  speed_msg.vector.y = speed_act_right;   //right wheel speed (in m/s)
  speed_msg.vector.z = time/1000;         //looptime, should be the same as specified in LOOPTIME (in s)
  speed_pub.publish(&speed_msg);
  nh.spinOnce();
  nh.loginfo("Publishing odometry");
}

//Left motor encoder counter
void encoderLeftMotor() {
  if (digitalRead(PIN_ENCOD_A_MOTOR_LEFT) == digitalRead(PIN_ENCOD_B_MOTOR_LEFT)) pos_left++;
  else pos_left--;
}

//Right motor encoder counter
void encoderRightMotor() {
  if (digitalRead(PIN_ENCOD_A_MOTOR_RIGHT) == digitalRead(PIN_ENCOD_B_MOTOR_RIGHT)) pos_right--;
  else pos_right++;
}
}
