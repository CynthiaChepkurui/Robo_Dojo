#include <Arduino.h>
#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <PID_v1.h>

// Define the pins for motor control and encoder

const int left_pwm_bwd = 8;

const int right_pwm_bwd = 9;
const int PIN_ENCOD_A_MOTOR_LEFT = 2;

const int PIN_ENCOD_A_MOTOR_RIGHT = 3;


// ... Other constants and variables ...
const double radius = 0.036;                   //Wheel radius, in m
const double wheelbase = 0.026;               //Wheelbase, in m
const double encoder_cpr = 168;                 //encoder revolution


//functions for locomation
//function that will be called when receiving command from host
void handle_cmd (const geometry_msgs::Twist& cmd_vel) {
  noCommLoops = 0;                                                  //Reset the counter for number of main loops without communication
  
  speed_req = cmd_vel.linear.x;                                     //Extract the commanded linear speed from the message

  angular_speed_req = cmd_vel.angular.z;                            //Extract the commanded angular speed from the message
  
  speed_req_left = speed_req - angular_speed_req*(wheelbase/2);     //Calculate the required speed for the left motor to comply with commanded linear and angular speeds
  speed_req_right = speed_req + angular_speed_req*(wheelbase/2);    //Calculate the required speed for the right motor to comply with commanded linear and angular speeds

}

// ros::Subscriber<geometry_msgs::Twist> cmd_vel("cmd_vel", handle_cmd);   //create a subscriber to ROS topic for velocity commands (will execute "handle_cmd" function when receiving data)
// geometry_msgs::Vector3Stamped speed_msg;                                //create a "speed_msg" ROS message
// ros::Publisher speed_pub("speed", &speed_msg);                          //create a publisher to ROS topic "speed" using the "speed_msg" type


void left_Bwd(const size_t speed) {
  analogWrite(left_pwm_bwd, speed);
    }
void left_Stop() {
  analogWrite(left_pwm_bwd, 0)
  analogWrite(right_pwm_bwd, speed);
    }

void right_Bwd(const size_t speed) {
  analogWrite(right_pwm_bwd, speed);
  }

void right_Stop() {
    analogWrite(right_pwm_bwd, 0);
    analogWrite(left_pwm_bwd, speed)
  }


void setup() {
  //motor
    // sets the digital pin 13 as output
  pinMode(right_pwm_bwd, OUTPUT);
  
  pinMode(left_pwm_bwd, OUTPUT);

  
  nh.initNode();                            //init ROS node
  nh.getHardware()->setBaud(57600);         //set baud for ROS serial communication
  nh.subscribe(cmd_vel);                    //suscribe to ROS topic for velocity commands
  nh.advertise(speed_pub);                  //prepare to publish speed in ROS topic
 
  
  //setting motor speeds to zero
  left_Stop();
  right_Stop();
  //setting PID parameters
  //PID_leftMotor.SetSampleTime(5);
  //PID_rightMotor.SetSampleTime(5);
  PID_leftMotor.SetOutputLimits(-max_speed, max_speed);
  PID_rightMotor.SetOutputLimits(-max_speed, max_speed);
  PID_leftMotor.SetMode(AUTOMATIC);
  PID_rightMotor.SetMode(AUTOMATIC);
    
  // // Define the rotary encoder for left motor
  // pinMode(PIN_ENCOD_A_MOTOR_LEFT, INPUT); 
  // pinMode(PIN_ENCOD_B_MOTOR_LEFT, INPUT); 
  // digitalWrite(PIN_ENCOD_A_MOTOR_LEFT, HIGH);                // turn on pullup resistor
  // digitalWrite(PIN_ENCOD_B_MOTOR_LEFT, HIGH);
  // attachInterrupt(0, encoderLeftMotor, RISING);

  // // Define the rotary encoder for right motor
  // pinMode(PIN_ENCOD_A_MOTOR_RIGHT, INPUT); 
  // pinMode(PIN_ENCOD_B_MOTOR_RIGHT, INPUT); 
  // digitalWrite(PIN_ENCOD_A_MOTOR_RIGHT, HIGH);                // turn on pullup resistor
  // digitalWrite(PIN_ENCOD_B_MOTOR_RIGHT, HIGH);
  // attachInterrupt(1, encoderRightMotor, RISING);
  
  // colour sensor

   // Set S0 - S3 as outputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);

  // Set Sensor output as input
  pinMode(sensorOut, INPUT);

  // Set Frequency scaling to 20%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);

  // Setup Serial Monitor
  Serial.begin(9600);

  // ... Other setup code ...
}

void loop() {
 

  // Autonomous movement code (from your existing code)
  nh.spinOnce();
  if((millis()-lastMilli) >= LOOPTIME)   
  {                                                                           // enter timed loop
    lastMilli = millis();
       
    if (abs(pos_left) < 5){                                                   //Avoid taking in account small disturbances
      speed_act_left = 0;
    }
    else {
      speed_act_left=((pos_left/encoder_cpr)*2*PI)*(1000/LOOPTIME)*radius;           // calculate speed of left wheel
    }
    
    if (abs(pos_right) < 5){                                                  //Avoid taking in account small disturbances
      speed_act_right = 0;
    }
    else {
    speed_act_right=((pos_right/encoder_cpr)*2*PI)*(1000/LOOPTIME)*radius;          // calculate speed of right wheel
    }

        // publishing encoder values for debugging the robot
          String LS = String(pos_left);
    String RS = String(pos_right);

    String FS= "LE  " + LS + "     " + "RE  "+ RS;
    char FA[FS.length() + 1];
    FS.toCharArray(FA,FS.length() + 1);

    nh.loginfo(FA);
    // debugging part complete
    
    pos_left = 0;
    pos_right = 0;

    speed_cmd_left = constrain(speed_cmd_left, -max_speed, max_speed);
    PID_leftMotor.Compute();                                                 
    // compute PWM value for left motor. Check constant definition comments for more information.
    PWM_leftMotor = constrain(((speed_req_left+sgn(speed_req_left)*min_speed_cmd)/speed_to_pwm_ratio) + (speed_cmd_left/speed_to_pwm_ratio), -255, 255); //

    speed_cmd_right = constrain(speed_cmd_right, -max_speed, max_speed);    
    PID_rightMotor.Compute();                                                 
    // compute PWM value for right motor. Check constant definition comments for more information.
    PWM_rightMotor = constrain(((speed_req_right+sgn(speed_req_right)*min_speed_cmd)/speed_to_pwm_ratio) + (speed_cmd_right/speed_to_pwm_ratio), -255, 255); // 

    if (noCommLoops >= noCommLoopMax) {                   //Stopping if too much time without command
        left_Stop();

    }
    else if (speed_req_left == 0){                        //Stopping
      left_Stop();
    }
    else if (PWM_leftMotor > 0){    
        left_Bwd(abs(PWM_leftMotor));                   //Going forward
    }
    else {              
        left_Fwd(abs(PWM_leftMotor));                   //Going backward
      
    }
    

    if (noCommLoops >= noCommLoopMax) {                   //Stopping if too much time without command
      right_Stop();
    }
    else if (speed_req_right == 0){                       //Stopping
      right_Stop();
    }
    else if (PWM_rightMotor > 0){                         //Going forward
      right_Fwd(abs(PWM_rightMotor));
    }
    else {                                                //Going backward
      right_Bwd(abs(PWM_rightMotor));
    }

    if((millis()-lastMilli) >= LOOPTIME){         //write an error if execution time of the loop in longer than the specified looptime
      nh.loginfo(" TOO LONG ");
    }

    noCommLoops++;
    if (noCommLoops == 65535){
      noCommLoops = noCommLoopMax;
    }
    
    publishSpeed(LOOPTIME);   //Publish odometry on ROS topic
  }
}

// Existing functions, including PID control and motor control
void publishSpeed(double time) {
  speed_msg.header.stamp = nh.now();      //timestamp for odometry data
  speed_msg.vector.x = speed_act_left;    //left wheel speed (in m/s)
  speed_msg.vector.y = speed_act_right;   //right wheel speed (in m/s)
  speed_msg.vector.z = time/1000;         //looptime, should be the same as specified in LOOPTIME (in s)
  speed_pub.publish(&speed_msg);
  nh.spinOnce();
  nh.loginfo("Publishing odometry");
}



template <typename T> int sgn(T val) {
    return (T(0) < val) - (val < T(0));

// Function to read Pulse Widths for a specific color


// ... Rest of  existing code ...
